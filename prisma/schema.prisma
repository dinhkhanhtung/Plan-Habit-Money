// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String       @id @default(cuid())
  name                String?
  email               String       @unique
  emailVerified       DateTime?
  image               String?
  passwordHash        String?
  subscriptionStatus  String?      @default("free") // 'free', 'premium'
  usageDaysRemaining  Int?         @default(0) // Days of usage remaining
  subscriptionExpiresAt DateTime? // When the current subscription expires

  accounts            Account[]
  sessions            Session[]
  transactions        Transaction[]
  usageLogs           UsageLog[]
  weeklyPlannerTasks  WeeklyPlannerTask[]
  goals               Goal[]
  habits              Habit[]
  budgets             Budget[]
  financialTransactions FinancialTransaction[]
  settings            UserSettings?
}

model WeeklyPlannerTask {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  date        DateTime
  time        String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([userId, completed])
}

model Goal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  targetDate  DateTime?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, completed])
}

model Habit {
  id          String     @id @default(cuid())
  userId      String
  name        String
  description String?
  frequency   String     // 'daily', 'weekly', etc.
  streak      Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs        HabitLog[]

  @@index([userId, createdAt])
}

model HabitLog {
  id        String   @id @default(cuid())
  habitId   String
  date      DateTime
  completed Boolean  @default(false)
  createdAt DateTime @default(now())

  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@index([habitId, date])
  @@index([habitId, completed])
}

model Budget {
  id          String  @id @default(cuid())
  userId      String
  name        String
  category    String
  amount      Int     // Amount in cents
  spent       Int     @default(0)
  period      String  // 'monthly', 'weekly', etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, category])
}

model FinancialTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int      // Amount in cents
  description String?
  category    String
  type        String   // 'income', 'expense'
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([userId, type])
  @@index([userId, category])
}

model UserSettings {
  id                String  @id @default(cuid())
  userId            String  @unique
  theme             String  @default("light")
  notifications     Boolean @default(true)
  currency          String  @default("usd")
  weeklyReminders   Boolean @default(true)
  habitCompletion   Boolean @default(true)
  budgetThreshold   Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int      // Amount in cents
  currency    String   @default("usd")
  status      String   // 'pending', 'succeeded', 'failed', 'canceled'
  stripePaymentIntentId String? @unique
  daysPurchased Int    // Number of days purchased
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageLog {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  daysUsed  Int      @default(1)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
